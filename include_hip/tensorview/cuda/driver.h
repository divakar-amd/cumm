// !!! This is a file automatically generated by hipify!!!
/*
 * Copyright (c) 2021, NVIDIA CORPORATION. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// https://github.com/NVIDIA/TensorRT/blob/96e23978cd6e4a8fe869696d3d8ec2b47120629b/plugin/common/cudaDriverWrapper.cpp
// https://github.com/NVIDIA/TensorRT/blob/96e23978cd6e4a8fe869696d3d8ec2b47120629b/plugin/common/cudaDriverWrapper.h
#pragma once

#define CUDA_LIB_NAME "amdhip64"

#if defined(_WIN32)
#if !defined(WIN32_LEAN_AND_MEAN)
#define WIN32_LEAN_AND_MEAN
#endif // defined(WIN32_LEAN_AND_MEAN)
#include <windows.h>
#define dllOpen(name) (void *)LoadLibraryA("nv" name ".dll")
#define dllClose(handle) FreeLibrary(static_cast<HMODULE>(handle))
#define dllGetSym(handle, name)                                                \
  GetProcAddress(static_cast<HMODULE>(handle), name)
#else
#include <dlfcn.h>
#define dllOpen(name) dlopen("lib" name ".so", RTLD_LAZY)
#define dllClose(handle) dlclose(handle)
#define dllGetSym(handle, name) dlsym(handle, name)
#endif

#include <hip/hip_runtime.h>
#include <tensorview/core/common.h>

namespace tv {

class CUDADriverWrapper {
public:
  CUDADriverWrapper() {
    handle = dllOpen(CUDA_LIB_NAME);
    TV_ASSERT_RT_ERR(handle != nullptr, "load CUDA Driver library failed!!! "
                                        "You must install cuda driver first.");

    auto load_sym = [](void *handle, const char *name) {
      void *ret = dllGetSym(handle, name);
      TV_ASSERT_RT_ERR(ret != nullptr, "load", name,
                       "from CUDA Driver library failed!!!");
      return ret;
    };

    *(void **)(&_cuModuleUnload) = load_sym(handle, "hipModuleUnload");
    *(void **)(&_cuModuleLoadDataEx) = load_sym(handle, "hipModuleLoadDataEx");
    *(void **)(&_cuModuleGetFunction) = load_sym(handle, "hipModuleGetFunction");
    *(void **)(&_cuLaunchKernel) = load_sym(handle, "hipModuleLaunchKernel");
    *(void **)(&_cuLinkCreate) = load_sym(handle, "hiprtcLinkCreate");
    *(void **)(&_cuLinkAddFile) = load_sym(handle, "hiprtcLinkAddFile");
    *(void **)(&_cuLinkAddData) = load_sym(handle, "hiprtcLinkAddData");
    *(void **)(&_cuLinkComplete) = load_sym(handle, "hiprtcLinkComplete");
    *(void **)(&_cuLinkDestroy) = load_sym(handle, "hiprtcLinkDestroy");
    *(void **)(&_cuLaunchCooperativeKernel) =
        load_sym(handle, "hipModuleLaunchCooperativeKernel");
    *(void **)(&_cuFuncSetAttribute) = load_sym(handle, "hipFuncSetAttribute");
    *(void **)(&_cuGetErrorName) = load_sym(handle, "hipGetErrorName");
    *(void **)(&_cuFuncGetAttribute) = load_sym(handle, "hipFuncGetAttribute");
    *(void **)(&_cuModuleGetGlobal) = load_sym(handle, "hipModuleGetGlobal");
    // if cuda change cuLinkAddFile_v2 again (e.g. cuLinkAddFile_v3), we can
    // get compile error here.
    static_assert(&hipModuleGetGlobal == &hipModuleGetGlobal, "error");
    static_assert(&hiprtcLinkAddFile == &hiprtcLinkAddFile, "error");
    static_assert(&hiprtcLinkCreate == &hiprtcLinkCreate, "error");
    static_assert(&hiprtcLinkAddData == &hiprtcLinkAddData, "error");
  }

  ~CUDADriverWrapper() {
    if (handle) {
      dllClose(handle);
    }
  }

  // Delete default copy constructor and copy assignment constructor
  CUDADriverWrapper(const CUDADriverWrapper &) = delete;
  CUDADriverWrapper &operator=(const CUDADriverWrapper &) = delete;

  hipError_t cuDrvModuleUnload(hipModule_t hmod) const {
    return (*_cuModuleUnload)(hmod);
  }
  hipError_t cuDrvModuleGetGlobal(hipDeviceptr_t *dptr, size_t *bytes, hipModule_t hmod,
                                const char *name) const {
    return (*_cuModuleGetGlobal)(dptr, bytes, hmod, name);
  }

  hipError_t cuDrvModuleLoadDataEx(hipModule_t *module, const void *image,
                                 unsigned int numOptions, hipJitOption *options,
                                 void **optionValues) const {
    return (*_cuModuleLoadDataEx)(module, image, numOptions, options,
                                  optionValues);
  }
  hipError_t cuDrvModuleGetFunction(hipFunction_t *hfunc, hipModule_t hmod,
                                  const char *name) const {
    return (*_cuModuleGetFunction)(hfunc, hmod, name);
  }
  hipError_t cuDrvLinkAddFile(hiprtcLinkState state, hiprtcJITInputType type,
                            const char *path, uint32_t numOptions,
                            hipJitOption *options, void **optionValues) const {
    return (*_cuLinkAddFile)(state, type, path, numOptions, options,
                             optionValues);
  }
  hipError_t cuDrvLinkAddData(hiprtcLinkState state, hiprtcJITInputType type, void *data,
                            size_t size, const char *name, uint32_t numOptions,
                            hipJitOption *options, void **optionValues) const {
    return (*_cuLinkAddData)(state, type, data, size, name, numOptions, options,
                             optionValues);
  }
  hipError_t cuDrvLinkCreate(uint32_t numOptions, hipJitOption *options,
                           void **optionValues, hiprtcLinkState *stateOut) const {
    return (*_cuLinkCreate)(numOptions, options, optionValues, stateOut);
  }

  hipError_t cuDrvLinkDestroy(hiprtcLinkState state) const {
    return (*_cuLinkDestroy)(state);
  }
  hipError_t cuDrvLinkComplete(hiprtcLinkState state, void **cubinOut,
                             size_t *sizeOut) const {
    return (*_cuLinkComplete)(state, cubinOut, sizeOut);
  }

  hipError_t cuDrvLaunchKernel(hipFunction_t f, uint32_t gridDimX, uint32_t gridDimY,
                             uint32_t gridDimZ, uint32_t blockDimX,
                             uint32_t blockDimY, uint32_t blockDimZ,
                             uint32_t sharedMemBytes, hipStream_t hStream,
                             void **kernelParams, void **extra) const {
    return (*_cuLaunchKernel)(f, gridDimX, gridDimY, gridDimZ, blockDimX,
                              blockDimY, blockDimZ, sharedMemBytes, hStream,
                              kernelParams, extra);
  }
  hipError_t cuDrvLaunchCooperativeKernel(
      hipFunction_t f, uint32_t gridDimX, uint32_t gridDimY, uint32_t gridDimZ,
      uint32_t blockDimX, uint32_t blockDimY, uint32_t blockDimZ,
      uint32_t sharedMemBytes, hipStream_t hStream, void **kernelParams) const {
    return (*_cuLaunchCooperativeKernel)(f, gridDimX, gridDimY, gridDimZ,
                                         blockDimX, blockDimY, blockDimZ,
                                         sharedMemBytes, hStream, kernelParams);
  }
  hipError_t cuDrvFuncSetAttribute(hipFunction_t hfunc, hipFunction_attribute attrib,
                                 int value) const {
    return (*_cuFuncSetAttribute)(hfunc, attrib, value);
  }
  hipError_t cuDrvGetErrorName(hipError_t error, const char **pStr) const {
    return (*_cuGetErrorName)(error, pStr);
  }
  hipError_t cuDrvFuncGetAttribute(int *pi, hipFunction_attribute attrib,
                                 hipFunction_t hfunc) const {
    return (*_cuFuncGetAttribute)(pi, attrib, hfunc);
  }

private:
  void *handle;
  hipError_t (*_cuGetErrorName)(hipError_t, const char **);
  hipError_t (*_cuFuncSetAttribute)(hipFunction_t, hipFunction_attribute, int);
  hipError_t (*_cuFuncGetAttribute)(int *, hipFunction_attribute, hipFunction_t);
  hipError_t (*_cuLaunchCooperativeKernel)(hipFunction_t, unsigned int, unsigned int,
                                         unsigned int, unsigned int,
                                         unsigned int, unsigned int,
                                         unsigned int, hipStream_t, void **);

  hipError_t (*_cuLinkComplete)(hiprtcLinkState, void **, size_t *);
  hipError_t (*_cuLinkDestroy)(hiprtcLinkState);
  hipError_t (*_cuLinkCreate)(unsigned int, hipJitOption *, void **,
                            hiprtcLinkState *);
  hipError_t (*_cuLinkAddFile)(hiprtcLinkState, hiprtcJITInputType, const char *,
                             unsigned int, hipJitOption *, void **);
  hipError_t (*_cuLinkAddData)(hiprtcLinkState, hiprtcJITInputType, void *, size_t,
                             const char *, unsigned int, hipJitOption *,
                             void **);
  hipError_t (*_cuModuleGetGlobal)(hipDeviceptr_t *, size_t *, hipModule_t,
                                 const char *);
  hipError_t (*_cuModuleUnload)(hipModule_t);
  hipError_t (*_cuModuleLoadDataEx)(hipModule_t *module, const void *image,
                                  unsigned int numOptions,
                                  hipJitOption *options, void **optionValues);
  hipError_t (*_cuModuleGetFunction)(hipFunction_t *, hipModule_t, const char *);
  hipError_t (*_cuLaunchKernel)(hipFunction_t f, uint32_t gridDimX,
                              uint32_t gridDimY, uint32_t gridDimZ,
                              uint32_t blockDimX, uint32_t blockDimY,
                              uint32_t blockDimZ, uint32_t sharedMemBytes,
                              hipStream_t hStream, void **kernelParams,
                              void **extra);
};

} // namespace tv
